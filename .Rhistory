# Clear expenses when "Clear All Expenses" button is clicked
observeEvent(input$clear_expenses, {
values$expenses <- data.frame(
Description = character(),
Amount = numeric(),
stringsAsFactors = FALSE
)
})
# Calculate total income, total expenses, and remaining balance
output$incomeBox <- renderValueBox({
valueBox(
formatC(input$income, format = "f", big.mark = ","),
"Income ($)",
icon = icon("dollar-sign"),
color = "green"
)
})
output$expenseBox <- renderValueBox({
total_expense <- sum(values$expenses$Amount)
valueBox(
formatC(total_expense, format = "f", big.mark = ","),
"Total Expenses ($)",
icon = icon("shopping-cart"),
color = "red"
)
})
output$balanceBox <- renderValueBox({
total_expense <- sum(values$expenses$Amount)
balance <- input$income - total_expense
valueBox(
formatC(balance, format = "f", big.mark = ","),
"Remaining Balance ($)",
icon = icon("wallet"),
color = "blue"
)
})
# Display expenses table
output$expenses_table <- renderTable({
values$expenses
})
# Plot expenses
output$expenses_plot <- renderPlotly({
plot_ly(
values$expenses,
x = ~ Description,
y = ~ Amount,
type = 'bar',
name = 'Expenses'
) %>%
layout(
title = "Expense Distribution",
xaxis = list(title = "Expense Description"),
yaxis = list(title = "Amount ($)")
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(dplyr)
library(plotly)
library(DBI)
library(RMySQL)
# MySQL connection settings
db_connect <- function() {
db <- dbConnect(
RMySQL::MySQL(),
user = 'root',
password = 'Ironman@3000',
dbname = "finance_tracker",
host = 'localhost',
port = 3306
)
return(db)
}
# Define the UI for the finance tracker dashboard with improved login and registration
ui <- dashboardPage(
dashboardHeader(title = "Personal Finance Tracker", uiOutput("logout_button")),
dashboardSidebar(
sidebarMenuOutput("dynamicMenu")
# sidebarMenu(
#   id = "tabs",
#   menuItem(
#     "Dashboard",
#     tabName = "dashboard",
#     icon = icon("dashboard")
#   ),
#   hidden(menuItem(
#     "Add Expense", tabName = "add_expense", icon = icon("plus")
#   )),
#   menuItem("User Profile", tabName = "user_profile", icon = icon("user")),
#   menuItem("Admin Panel", tabName = "admin_panel", icon = icon("cogs")),
#   menuItem("About", tabName = "about", icon = icon("info-circle"))
# )
),
dashboardBody(hidden(div(
id = "app_content", tabItems(
tabItem(
tabName = "dashboard",
fluidRow(
valueBoxOutput("incomeBox", width = 4),
valueBoxOutput("expenseBox", width = 4),
valueBoxOutput("balanceBox", width = 4)
),
fluidRow(
box(
title = "Expenses Overview",
status = "primary",
solidHeader = TRUE,
tableOutput("expenses_table"),
width = 6
),
box(
title = "Expense Distribution",
status = "primary",
solidHeader = TRUE,
plotlyOutput("expenses_plot"),
width = 6
)
)
),
tabItem(tabName = "add_expense", fluidRow(
box(
title = "Add Expense",
status = "primary",
solidHeader = TRUE,
numericInput(
"income",
"Enter your Income:",
value = 0,
min = 0,
step = 100
),
textInput("description", "Expense Description:", ""),
numericInput(
"amount",
"Expense Amount:",
value = 0,
min = 0,
step = 10
),
actionButton("add_expense", "Add Expense"),
actionButton("clear_expenses", "Clear All Expenses"),
width = 6
)
)),
tabItem(
tabName = "about",
h2("Personal Finance Tracker"),
p("This app helps you track your expenses and manage your income.")
)
)
)), tabItems(
tabItem(tabName = "user_profile", useShinyjs(), fluidRow(
wellPanel(
id = "login_registration_box",
style = "width: 400px;",
tabsetPanel(
id = "login_register_tabs",
tabPanel(
"Login",
textInput("username", "Username:", placeholder = "Enter your username"),
passwordInput("password", "Password:", placeholder = "Enter your password"),
actionButton("login_button", "Login"),
textOutput("login_error"),
br(),
actionLink("show_register", "Create a new account")
),
tabPanel(
"Register",
textInput("new_username", "Username:", placeholder = "Choose a username"),
passwordInput("new_password", "Password:", placeholder = "Choose a password"),
actionButton("create_account", "Create Account"),
textOutput("registration_status"),
br(),
actionLink("show_login", "Already have an account? Login here")
)
)
)
))
))
)
# Define server logic with validation
server <- function(input, output, session) {
# Establish database connection
db <- db_connect()
# Close connection when app stops
session$onSessionEnded(function() {
dbDisconnect(db)
})
output$dynamicMenu <- renderMenu({
menu <- sidebarMenu(
id = "tabs",
menuItem("User Profile", tabName = "user_profile", icon = icon("user")),
menuItem("Admin Panel", tabName = "admin_panel", icon = icon("cogs")),
menuItem("About", tabName = "about", icon = icon("info-circle"))
)
if (input$login_button && !input$logout_button){
menu <- sidebarMenu(
menuItem(
"Dashboard",
tabName = "dashboard",
icon = icon("dashboard")
),
menuItem(
"Add Expense", tabName = "add_expense", icon = icon("plus")
)
)
}
menu
})
shinyjs::hide("registration_box")
# Reactive value to store login status
login_status <- reactiveVal(FALSE)
# Toggle between login and registration forms
observeEvent(input$show_register, {
updateTabsetPanel(session, "login_register_tabs", selected = "Register")
})
observeEvent(input$show_login, {
updateTabsetPanel(session, "login_register_tabs", selected = "Login")
})
# User login function
observeEvent(input$login_button, {
req(input$username != "" && input$password != "")
username <- input$username
password <- input$password
query <- sprintf("SELECT * FROM users WHERE username = '%s' AND password = '%s'",
username,
password)
res <- dbGetQuery(db, query)
if (nrow(res) == 1) {
login_status(TRUE)  # Successful login
shinyjs::hide("login_registration_box")
shinyjs::show("app_content")
output$logout_button <- renderUI({
actionButton("logout_button", "Logout", class = "btn btn-danger")
})
} else {
output$login_error <- renderText("Invalid username or password!")
}
})
# User registration function
observeEvent(input$create_account, {
req(input$new_username != "" && input$new_password != "")
new_username <- input$new_username
new_password <- input$new_password
query <- sprintf("SELECT * FROM users WHERE username = '%s'", new_username)
res <- dbGetQuery(db, query)
if (nrow(res) == 0) {
query <- sprintf(
"INSERT INTO users (username, password) VALUES ('%s', '%s')",
new_username,
new_password
)
dbExecute(db, query)
output$registration_status <- renderText("Account created successfully!")
updateTabsetPanel(session, "login_register_tabs", selected = "Login")
} else {
output$registration_status <- renderText("Username already exists.")
}
})
# Logout logic
observeEvent(input$logout_button, {
login_status(FALSE)
shinyjs::show("login_registration_box")
shinyjs::hide("app_content")
output$logout_button <- renderUI(NULL)
})
# Reactive value to store expenses
values <- reactiveValues(expenses = data.frame(
Description = character(),
Amount = numeric(),
stringsAsFactors = FALSE
))
# Update expenses when "Add Expense" button is clicked
observeEvent(input$add_expense, {
req(input$description != "" && input$amount > 0)
new_expense <- data.frame(
Description = input$description,
Amount = input$amount,
stringsAsFactors = FALSE
)
values$expenses <- rbind(values$expenses, new_expense)
})
# Clear expenses when "Clear All Expenses" button is clicked
observeEvent(input$clear_expenses, {
values$expenses <- data.frame(
Description = character(),
Amount = numeric(),
stringsAsFactors = FALSE
)
})
# Calculate total income, total expenses, and remaining balance
output$incomeBox <- renderValueBox({
valueBox(
formatC(input$income, format = "f", big.mark = ","),
"Income ($)",
icon = icon("dollar-sign"),
color = "green"
)
})
output$expenseBox <- renderValueBox({
total_expense <- sum(values$expenses$Amount)
valueBox(
formatC(total_expense, format = "f", big.mark = ","),
"Total Expenses ($)",
icon = icon("shopping-cart"),
color = "red"
)
})
output$balanceBox <- renderValueBox({
total_expense <- sum(values$expenses$Amount)
balance <- input$income - total_expense
valueBox(
formatC(balance, format = "f", big.mark = ","),
"Remaining Balance ($)",
icon = icon("wallet"),
color = "blue"
)
})
# Display expenses table
output$expenses_table <- renderTable({
values$expenses
})
# Plot expenses
output$expenses_plot <- renderPlotly({
plot_ly(
values$expenses,
x = ~ Description,
y = ~ Amount,
type = 'bar',
name = 'Expenses'
) %>%
layout(
title = "Expense Distribution",
xaxis = list(title = "Expense Description"),
yaxis = list(title = "Amount ($)")
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Text Rendering Example"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
h2("Text Output Example"),
textInput("userText", "Enter some text:", "Hello, Shiny!"),
textOutput("dynamicText"),     # Display the dynamic text here
verbatimTextOutput("verbatimText")  # Verbatim text output
)
)
)
)
server <- function(input, output) {
# Render dynamic text
output$dynamicText <- renderText({
paste("You entered:", input$userText)
})
# Render text in verbatim format
output$verbatimText <- renderText({
paste("Verbatim text:\n", input$userText)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "TabItems Example"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Data", tabName = "data", icon = icon("table")),
menuItem("Settings", tabName = "settings", icon = icon("cog"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
h2("Dashboard Content"),
p("This is the content for the dashboard tab.")
),
# Second tab content
tabItem(tabName = "data",
h2("Data Tab Content"),
tableOutput("data_table")
),
# Third tab content
tabItem(tabName = "settings",
h2("Settings Tab Content"),
p("Adjust your settings here.")
)
)
)
)
# Define server logic
server <- function(input, output) {
# Example data for the data tab
output$data_table <- renderTable({
head(mtcars)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
shiny::runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
shiny::runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
library(shinyWidgets)
runApp('Downloads/shinyApp')
runApp('Downloads/shinyApp')
